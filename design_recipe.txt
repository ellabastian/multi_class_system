{{PROBLEM}} Multi-Class Planned Design Recipe
1. Describe the Problem
Put or write the user story here. Add any clarifying notes you might have.

>As a user
>So that I can record my experiences
>I want to keep a regular diary

>As a user
>So that I can reflect on my experiences
>I want to read my past diary entries

>As a user
>So that I can reflect on my experiences in my busy day
>I want to select diary entries to read based on how much time I have and my reading speed

>As a user
>So that I can keep track of my tasks
>I want to keep a todo list along with my diary

>As a user
>So that I can keep track of my contacts
>I want to see a list of all of the mobile phone numbers in all my diary entries


       ┌──────────────────────────────────┐      ┌────────────────────────┐
       │ Diary                            │      │ DiaryEntry             │
       │  - add diary entry               │      │ - title                │
       │  - view/list all diary entries   │◄─────┤ - contents             │
       │  - reading time(wpm)             │      │ - count_words          │
       │  - reading chunk(wpm, minutes)   │      │ - get_phone_number     │
       └──────────────────────────────────┘      └────────────┬───────────┘
                                                              │
                                                              │
                            ┌────────────┐             ┌──────▼──────┐
                            │ TodoList   │             │PhoneNumbers │
                            │ - add      │             │ - add       │
                            │ - view     │             │ - list      │
                            └────────────┘             └─────────────┘








2. Design the Class System
Consider diagramming out the classes and their relationships. Take care to focus on the details you see as important, not everything. The diagram below uses asciiflow.com but you could also use excalidraw.com, draw.io, or miro.com

class Diary
    def initialize
        @list = []
    end

    def add(entry)
        @list << entry
    end

    def view
        @list
    end

    def reading time(wpm)
        fail 'Reading speed must be above zero.' unless wpm > 0
        return (count_words / wpm.to_f).ceil
    end

    def reading chunk(wpm, time)
        fail 'Reading speed must be above zero.' unless wpm > 0
        no_words_we_can_read = wpm * minutes
        start_from = @furthest_word_read
        end_at = @furthest_word_read + no_words_we_can_read
        word_list = words[start_from, end_at]
        
        if end_at >= count_words
            @furthest_word_read = 0
        else
            @furthest_word_read = end_at
        end
        return word_list.join(" ")
    end

end

class DiaryEntry
    def initialize(title, contents)
        @title = title
        @contents = contents
    end

    def title
        return @title
    end

    def words 
        @contents.split(" ") 
    end

    def contents
        return @contents
    end

    def count_words(text)
        return @contents.split(" ").length
    end

    def get_phone_number(text)
        phone_number =~ /[0-9]/
        return phone_number
    end
end

class TodoList
    def initialize(task)
        task = task
        list = []
    end

    def add
    end

    def view_tasks
    end
end

class PhoneNumber
    def initialize
        list = []
    end

    def add_phone_number
        phone_number = get_phone_number
        list << phone_number
    end

    def view_phone_number
    end
end


3. Create Examples as Integration Tests
Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

# EXAMPLE

# Gets all diary entries
diary = Diary.new
entry_1 = DiaryEntry.new("Hello, world")
entry_2 = DiaryEntry.new("I like chocolate")
diary.add(entry_1)
diary.add(entry_2)
diary.view => ["Hello, world", "I like chocolate"]

# Gets phone numbers from text
entry = DiaryEntry.new("My number is 07827358789")
contacts = PhoneNumber.new
phone_number = entry.get_phone_number
phone_number.add_phone_number
phone_number.view_phone_number

# Gets reading_time
diary = Diary.new
diary_entry = DiaryEntry.new("Hello, my name is Ella")
reading_time = diary_entry.count_words


4. Create Examples as Unit Tests
Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.

# EXAMPLE

# Constructs a track
track = Track.new("Carte Blanche", "Veracocha")
track.title # => "Carte Blanche"
Encode each example as a test. You can add to the above list as you go.


5. Implement the Behaviour
After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.

